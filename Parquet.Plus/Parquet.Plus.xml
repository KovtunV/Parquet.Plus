<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Parquet.Plus</name>
    </assembly>
    <members>
        <member name="T:Parquet.Plus.Events.InvalidColumnEventArgs">
            <summary>
            Invalid column arguments
            </summary>
        </member>
        <member name="P:Parquet.Plus.Events.InvalidColumnEventArgs.Message">
            <summary>
            The message with invalid column
            </summary>
        </member>
        <member name="M:Parquet.Plus.Events.InvalidColumnEventArgs.#ctor(System.String)">
            <summary>
            Invalid column arguments
            </summary>
            <param name="message">The message with invalid column</param>
        </member>
        <member name="T:Parquet.Plus.Exceptions.PropertySelectorException">
            <summary>
            Exception when I'm trying make model's property setter/getter
            </summary>
        </member>
        <member name="M:Parquet.Plus.Exceptions.PropertySelectorException.#ctor">
            <summary>
            Exception when I'm trying make model's property setter/getter
            </summary>
        </member>
        <member name="T:Parquet.Plus.Extensions.ParquetExtensions">
            <summary>
            Parquet extensions
            </summary>
        </member>
        <member name="M:Parquet.Plus.Extensions.ParquetExtensions.BuildSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates setter method from column to property 
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <typeparam name="TProperty">Type of property, also column</typeparam>
            <param name="propertySelector">Target property selector</param>
            <returns>Setter method from column to property</returns>
        </member>
        <member name="M:Parquet.Plus.Extensions.ParquetExtensions.BuildSetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Creates setter method from column to property with different types
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <typeparam name="TColumn">Type of column</typeparam>
            <param name="propertySelector">Target property selector</param>
            <param name="mapperToPropertyExp">Mapper expression</param>
            <returns>Setter method from column to property</returns>
        </member>
        <member name="M:Parquet.Plus.Extensions.ParquetExtensions.BuildGetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates getter method from property to column
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <typeparam name="TProperty">Type of property, also column</typeparam>
            <param name="propertySelector">Source property selector</param>
            <returns>Getter method from property to column</returns>
        </member>
        <member name="M:Parquet.Plus.Extensions.ParquetExtensions.BuildGetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Creates geter method from property to column with different types
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <typeparam name="TColumn">Type of column</typeparam>
            <param name="propertySelector">Source property selector</param>
            <param name="mapperToColumnExp">Mapper extension</param>
            <returns>Getter method from property to column</returns>
        </member>
        <member name="T:Parquet.Plus.Mapping.DifferentTypes.DefaultMappers">
            <summary>
            Default mappers
            </summary>
        </member>
        <member name="P:Parquet.Plus.Mapping.DifferentTypes.DefaultMappers.IntToBool">
            <summary>
            Map int column to bool property
            </summary>
        </member>
        <member name="P:Parquet.Plus.Mapping.DifferentTypes.DefaultMappers.NullableIntToBool">
            <summary>
            Map nullable int column to bool property
            </summary>
        </member>
        <member name="P:Parquet.Plus.Mapping.DifferentTypes.DefaultMappers.DateTimeOffsetToDateTime">
            <summary>
            Map dateTimeOffset column to DateTime property, takes LocalDateTime value
            </summary>
        </member>
        <member name="P:Parquet.Plus.Mapping.DifferentTypes.DefaultMappers.NullableDateTimeOffsetToDateTime">
            <summary>
            Map nullable dateTimeOffset column to DateTime property, takes LocalDateTime value
            </summary>
        </member>
        <member name="T:Parquet.Plus.Mapping.DifferentTypes.IDifferentTypesMapper`2">
            <summary>
            Interface for type mappers
            </summary>
            <typeparam name="TProperty">Type of model's proeprty</typeparam>
            <typeparam name="TColumn">Type of column</typeparam>
        </member>
        <member name="M:Parquet.Plus.Mapping.DifferentTypes.IDifferentTypesMapper`2.ToColumn(`0)">
            <summary>
            Converts a propertyItem to a columnItem
            </summary>
            <param name="item">item to convert</param>
            <returns>TColumn item</returns>
        </member>
        <member name="M:Parquet.Plus.Mapping.DifferentTypes.IDifferentTypesMapper`2.ToProperty(`1)">
            <summary>
            Converts a columnItem to a propertyItem
            </summary>
            <param name="item">item to convert</param>
            <returns>TProperty item</returns>
        </member>
        <member name="T:Parquet.Plus.Mapping.MapperConfig`1">
            <summary>
            Mapping config for properties
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.#ctor">
            <summary>
            Mapping config for properties
            </summary>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.MapProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds property mapping info
            </summary>
            <typeparam name="TProperty">Type of property, also column</typeparam>
            <param name="propertySelector">Target property selector</param>
            <param name="columnName">Column name</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.MapProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,Parquet.Plus.Mapping.DifferentTypes.IDifferentTypesMapper{``0,``1})">
            <summary>
            Adds property mapping info with different types
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <typeparam name="TColumn">Type of column</typeparam>
            <param name="propertySelector">Target property selector</param>
            <param name="columnName">Column name</param>
            <param name="typesMapper">Types mapper</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.MapProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Adds property mapping info with different types
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <typeparam name="TColumn">Type of column</typeparam>
            <param name="propertySelector">Target property selector</param>
            <param name="columnName">Column name</param>
            <param name="mapperToColumn">Mapper from property to column</param>
            <param name="mapperToProperty">Mapper from column to property</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.ToDataColumns(`0[])">
            <summary>
            Makes parquet columns from models
            </summary>
            <param name="models">Models with data</param>
            <returns>Parquet columns</returns>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.Contains(System.String)">
            <summary>
            Contains column name in configs
            </summary>
            <param name="columnName">column name</param>
            <returns>bool if contains</returns>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperConfig`1.GetPropertyConfigs">
            <summary>
            Returns property configs
            </summary>
            <returns>Property configs</returns>
        </member>
        <member name="T:Parquet.Plus.Mapping.MapperPropertyConfig`1">
            <summary>
            Configuration for property mapping
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
        </member>
        <member name="P:Parquet.Plus.Mapping.MapperPropertyConfig`1.ColumnName">
            <summary>
            Upper invariant column name
            </summary>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperPropertyConfig`1.#ctor(System.String)">
            <summary>
            Configuration for property mapping
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperPropertyConfig`1.Map(`0[],Parquet.Data.DataColumn,System.Int64)">
            <summary>
            Map data from column to models
            </summary>
            <param name="models">Models</param>
            <param name="dataColumn">Parquet column</param>
            <param name="modelOffset">Model offset</param>
        </member>
        <member name="M:Parquet.Plus.Mapping.MapperPropertyConfig`1.ToDataColumn(`0[])">
            <summary>
            Makes parquet column from models
            </summary>
            <param name="models">Models</param>
            <returns>Parquet column</returns>
        </member>
        <member name="T:Parquet.Plus.ParquetDataEngine">
            <summary>
            Works with parquet data
            </summary>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.#ctor">
            <summary>
            Works with parquet data
            </summary>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.Read``1(Parquet.Plus.Mapping.MapperConfig{``0},System.String)">
            <summary>
            Reads data from parquet file
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <param name="mapConfig">Mapping configuration</param>
            <param name="filePath">Parquet file path</param>
            <returns>Parsed data</returns>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.Read``1(Parquet.Plus.Mapping.MapperConfig{``0},System.IO.Stream)">
            <summary>
            Reads data from parquet stream
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <param name="mapConfig">Mapping configuration</param>
            <param name="fileStream">Parquet stream</param>
            <returns>parsed data</returns>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.Write``1(Parquet.Plus.Mapping.MapperConfig{``0},System.String,``0[])">
            <summary>
            Writes data to parquet file
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <param name="mapConfig">Mapping configuration</param>
            <param name="filePath">Parquet file path</param>
            <param name="models">Models</param>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.Write``1(Parquet.Plus.Mapping.MapperConfig{``0},System.IO.Stream,``0[])">
            <summary>
            Writes data to parquet stream
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <param name="mapConfig">Mapping configuration</param>
            <param name="fileStream">Parquet stream</param>
            <param name="models">Models</param>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.Append``1(Parquet.Plus.Mapping.MapperConfig{``0},System.String,``0[])">
            <summary>
            Appends data to parquet file
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <param name="mapConfig">Mapping configuration</param>
            <param name="filePath">Parquet file path</param>
            <param name="models">Models</param>
        </member>
        <member name="M:Parquet.Plus.ParquetDataEngine.Append``1(Parquet.Plus.Mapping.MapperConfig{``0},System.IO.Stream,``0[])">
            <summary>
            Appends data to parquet stream
            </summary>
            <typeparam name="TModel">Type of model</typeparam>
            <param name="mapConfig">Mapping configuration</param>
            <param name="fileStream">Parquet stream</param>
            <param name="models">Models</param>
        </member>
        <member name="E:Parquet.Plus.ParquetDataEngine.InvalidColumn">
            <summary>
            Event when I don't have the column map info
            </summary>
        </member>
    </members>
</doc>
